import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
    public static void main(String args[]) throws IOException {	
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();

		String[][] list = new String[n][2];
		String[][] sorted = new String[n][2];
		for(int i = 0; i < n; i++) {
			list[i][0] = sc.next();
			list[i][1] = sc.next();
		}

		mergeSort(list, 0, n-1, sorted);

		for(int p = 0; p < n; p++) {
			System.out.println(list[p][0] + " " + list[p][1]);
		}

		
    }

	private static void mergeSort(String[][] list, int left, int right, String[][] sorted) {
		if(left >= right) return;

		int mid = (left + right) / 2;

		mergeSort(list, left, mid, sorted);
		mergeSort(list, mid + 1, right, sorted);
		merge(list, left, mid, right, sorted);
	}

	private static void merge(String[][] list, int left, int mid, int right, String[][] sorted) {
		int l = left;
		int r = mid + 1;
		int k = left;

		for(; k <= right; ++k) {
			if(r > right) {
				sorted[k][0] = list[l][0];
				sorted[k][1] = list[l++][1];
			}
			else if (l > mid) {
				sorted[k][0] = list[r][0];
				sorted[k][1] = list[r++][1];
			}
			else if (Integer.parseInt(list[l][0]) <= Integer.parseInt(list[r][0])) {
				sorted[k][0] = list[l][0];
				sorted[k][1] = list[l++][1];
			}
			else {
				sorted[k][0] = list[r][0];
				sorted[k][1] = list[r++][1];
			}
		}

		for(l = left; l <= right; ++l) {
			list[l][0] = sorted[l][0];
			list[l][1] = sorted[l][1];
		}
	}
}
