import java.util.*;
import java.io.*;

public class Main {
  static int[][] stat;
  static boolean[] visited;

  static int n;
  static int min = Integer.MAX_VALUE;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    n = Integer.parseInt(br.readLine());
    stat = new int[n][n];
    visited = new boolean[n];

    for(int i = 0; i < n; i++) {
      StringTokenizer st = new StringTokenizer(br.readLine());

      for(int j = 0; j < n; j++) {
        stat[i][j] = Integer.parseInt(st.nextToken());
      }
    }

    dfs(0, 0);
    System.out.println(min);

	}

  static void dfs(int index, int depth) {
    if(depth == n / 2) {
      calculate();
      return;
    }

    for(int i = index; i < n; i++) {
      if(!visited[i]) {
        visited[i] = true;
        dfs(i + 1, depth + 1);
        visited[i] = false;
      }
    }
  }

  static void calculate() {
    int startScore = 0;
    int linkScore = 0;

    for(int i = 0; i < n-1; i++) {
      for(int j = i + 1; j < n; j++) {
        if(visited[i] == true && visited[j] == true) {
          startScore += stat[i][j];
          startScore += stat[j][i];
        }
        else if(visited[i] == false && visited[j] == false) {
          linkScore += stat[i][j];
          linkScore += stat[j][i];
        }
      }
    }

    int answer = Math.abs(startScore - linkScore);

    if(answer == 0) {
      System.out.println(answer);
      System.exit(0);
    }

    min = Math.min(answer, min);

    
  }
}
