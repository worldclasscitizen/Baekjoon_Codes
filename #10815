import java.util.*;
import java.io.*;

public class Main {
  static Integer[] cardSorted;
    public static void main(String args[]) throws IOException {	
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      StringBuilder sb = new StringBuilder();

      // INPUT Cards
      int n = Integer.parseInt(br.readLine());
      Integer[] cards = new Integer[n];
      StringTokenizer st = new StringTokenizer(br.readLine());
      for (int i = 0; i < n; i++) {
        cards[i] = Integer.parseInt(st.nextToken());
      }

      // INPUT list(same with Cards but sorted now)
      List<Integer> list = new ArrayList<Integer>();
      for(int i = 0; i < n; i++) {
        list.add(cards[i]);
      }
      Collections.sort(list);

      // INPUT cardSorted
      cardSorted = new Integer[n];
      for(int j = 0; j < n; j++) {
        cardSorted[j] = list.get(j);
      }

      // INPUT nums
      int m = Integer.parseInt(br.readLine());
      Integer[] nums = new Integer[m];
      StringTokenizer st2 = new StringTokenizer(br.readLine());
      for (int i = 0; i < m; i++) {
        nums[i] = Integer.parseInt(st2.nextToken());
      }
      
      // Binary Search
      for(int j : nums) {
        sb.append(binarySearch(j, 0, n - 1));
        sb.append(" ");
      }
      System.out.println(sb);
    }


    // Binary Search
    static int binarySearch(int key, int low, int high) {
      int mid;
    
      if(low <= high) {
        mid = (low + high) / 2;
    
        if(key == cardSorted[mid]) { // if successed
          return 1;
        } else if(key < cardSorted[mid]) {
          return binarySearch(key ,low, mid-1);  
        } else {
          return binarySearch(key, mid+1, high); 
        }
      }
      return 0; // if failed
    }
}
