import java.util.*;
import java.io.*;
import java.math.BigInteger;

public class Main {
  static StringBuilder sb = new StringBuilder();
  static int[][] dp;
  public static void main(String args[]) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());

    int t = Integer.parseInt(st.nextToken());
    for(int i = 0; i < t; i++) {
      st = new StringTokenizer(br.readLine());
      int r = Integer.parseInt(st.nextToken());
      int n = Integer.parseInt(st.nextToken());
      dp = new int[n+1][r+1];
      System.out.println(combination(n, r));
    }
  }

  static int combination(int n, int r) {
    if(dp[n][r] > 0) {
      return dp[n][r];
    }
    if(n == r || r == 0) { return dp[n][r] = 1; }
    return dp[n][r] = combination(n-1, r) + combination(n-1, r-1);
  }
}
