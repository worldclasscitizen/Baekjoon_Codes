import java.util.*;
import java.io.*;

public class Main {
    public static void main(String args[]) throws IOException {	
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      StringBuilder sb = new StringBuilder();

      // INPUT n
      StringTokenizer st = new StringTokenizer(br.readLine());
      int n = Integer.parseInt(st.nextToken());

      // INPUT nums
      int[] have = new int[n];
      StringTokenizer st2 = new StringTokenizer(br.readLine());
      for(int i = 0; i < n; i++) {
        have[i] = Integer.parseInt(st2.nextToken());
      }
      
      // INPUT m
      StringTokenizer st3 = new StringTokenizer(br.readLine());
      int m = Integer.parseInt(st3.nextToken());

      // INPUT tests, tMap
      int[] nums = new int[m];
      int[] arr = new int[m];
      TreeMap<Integer, Integer> tMap = new TreeMap<>();
      StringTokenizer st4 = new StringTokenizer(br.readLine());
      for(int j = 0; j < m; j++) {
        nums[j] = Integer.parseInt(st4.nextToken());
        arr[j] = nums[j];
        tMap.put(nums[j], 0);
      }

      Arrays.sort(arr);

      for(int drow : have) {
        if(binarySearch(drow, 0, arr.length - 1, arr) == 1) {
          tMap.put(drow, tMap.get(drow) + 1);
        }
        else {
          continue;
        }
      }

      for(int ans : nums) {
        sb.append(tMap.get(ans) + " ");
      }
      System.out.println(sb);
    }

    // Binary Search
    static int binarySearch(int drow, int low, int high, int[] arr) {
      int mid;
    
      if(low <= high) {
        mid = (low + high) / 2;
    
        if(drow == arr[mid]) { // if successed
          return 1;
        } else if(drow < arr[mid]) {
          return binarySearch(drow ,low, mid-1, arr);  
        } else {
          return binarySearch(drow, mid+1, high, arr); 
        }
      }
      return 0; // if failed
    }
}
